关于代码bug规律：
1，80% 的错误存在于20%的子程序中。
2, 50%的错误被发现存在于项目5%的类中。
3， 提高质量就能缩短开发周期，同事降低开发成本。
4， 避免维护容易出错的类，应该找出来，重新编码。
5， 大多数构建错误是程序员造成的。
6， 笔误是一种常见的错误根源。
7， 需求不清的业务错误也比较常见。
9， 测试检查缺陷率为30-35%左右，但是对设计和代码进行详细检查能发现55-60%的错误。
10，正式检查花1小时，而已避免33小时的维护工作，并且检查的效能是测试的20倍以上。
11，引入代码复查之后，95%的修改一次性正确，而没有引入复查之前，只有20%的代码一次性正确。
12， 独自详查通常能捕获60%的缺陷。
13， 通过阅读代码，每小时可以发现3.3个错误，而测试每小时只能发现1.8个错误，在整个项目周期内，代码阅读比各种测试多发现20-60%的错误。
14, 测试数据的错误，不易被发现。
15, 设计、编码、测试 时间比例  4：3：3，发现自己在设计和测试的时间，尤其是测试的时间上用的比较少。


bug检查列表
业务bug
    1，业务不熟悉，让老员工看一下自己代码，业务对不对。
    2，对于每次新需求，对着需求文档检查代码逻辑，看是不是按照需求来做的。


代码 bug
    1，代码错误，基础问题，通过自己的代码review,先查找问题。
    2，先写测试用例然后着手写代码。
    2，结构化测试（关注逻辑条件）：
        if ,while ,repeat ,for , and ,or
    3, 数据流的测试（关注数据定义-使用的情况）：
        已定义-已定义， 已定义-已退出， 已定义-已销毁， 已进入-已销毁， 已进入-已使用， 已销毁-已销毁，已销毁-已使用， 已使用-已定义，
        所有的定义，
        已定义-已使用的组合。
    4，等价划分:total>10 和 total<=10
    5，边界值分析：value+1， value-1， value
    6, 坏数据：数据少（没有数据），数据太多， 数据错误（无效数据），长度错误数据， 未初始化数据, 历史数据兼容。

